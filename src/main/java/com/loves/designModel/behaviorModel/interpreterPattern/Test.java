package com.loves.designModel.behaviorModel.interpreterPattern;

/**
 * @Author ：SunWenLong
 * @Date ：2019/1/8
 * 解释器模式(Interpreter Pattern):为某种语言定义一个文法，并用该文法解释语言中的语句。
 * 适用性:
 * 1.当读者需要一个命令解释器分析用户命令时。
 * 2.当程序需要分析一个代数串时。
 * 3.发程序要生成各种形式的输出时。
 *
 * 原理：计算模式按正常算数方式书写，解释器处理语法逻辑，
 *      计算模型里有两类符号：数据和计算符
 *      用逆波兰算法分析算式语法
 *      用解释器模式处理数据
 * 解释器模式：定义一个语法，定义一个解释器，该解释器处理该语法句子，将某些复杂问题，表达为
 *           某种语法规则，然后构建解释器来解释处理这些句子
 * 优点：容易修改，修改语法规则只要修改相应非终结符即可
 *      扩展方便，扩展语法，只要增加非终结符号类即可
 * 缺点：对于复杂语法的表示会产生复杂的类层次结构，不便管理和维护
 *      解释器采用递归方式，效率会受影响
 */
public class Test {
}
