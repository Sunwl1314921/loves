package com.loves.designModel.createModel.prototypePattern;

/**
 * @Author ：SunWenLong
 * @Date ：2019/1/8
 * 原型模式(Prototype Pattern):由结果到一个新的结果。
 * 例：根据由执行的SQL 查询结果得到另一个结果。
 * 与生成器类似工厂，两者都返回由许多方法的对象组成的类。
 * 差别:抽象工厂返回一系列相关的类。生成器是根据提供给它的数据一步一步地构建一个复杂的对象。
 *
 * 原型模式：通过复制现有实例来生成新的实例，无需知道相应类的信息
 * 优点：使用原型模式创建对象比直接new一个对象更有效
 *      隐藏制造新实例的复杂性
 *      重复地创建相似对象时可以考虑使用原型模式
 * 缺点：每一个类必须配备一个克隆方法
 *      深层复制比较复杂
 * 注意事项：
 *          使用原型模式复制对象不会调用类的构造方法，所以，
 *       单例模式与原型模式是冲突的，在使用时要特别注意。
 *          Object类的clone方法只会拷贝对象中的基本数据类型，对于数组，容器
 *       对象，引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式
 *       中的数组，容器对象，引用对象等另行拷贝。
 *
 * */
public class Test {
}
